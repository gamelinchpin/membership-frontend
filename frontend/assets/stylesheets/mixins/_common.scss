// =============================================================================
// Mixins
// =============================================================================

@import '../components/bower-components/sass-mq/mq';
// Guss - https://github.com/guardian/guss
// =============================================================================
@import '../components/bower-components/guss-rem/rem';
@import '../components/bower-components/guss-typography/typography';
@import '../components/bower-components/guss-css3/css3';
@import '../components/bower-components/guss-layout/columns';
@import '../components/bower-components/guss-layout/row';

// The grid system is already imported in the _vars.scss file where it's needed
// @import 'components/guss-grid-system/_grid-system';

// CSS helpers
// =============================================================================

// Vertical linear gradient with a plain fallback for older browsers
@mixin simple-gradient($from, $until) {
    // Fix for browsers not understanding transparent
    @if $from == transparent {
        $from: transparentize($until, 1);
    }

    @if $until == transparent {
        $until: transparentize($from, 1);
    }
    background-color: $from;
    background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($from), to($until));
    background-image: -webkit-linear-gradient($from, $until);
    background-image: linear-gradient(to bottom, $from, $until);
}

@function aspect-ratio-height($x, $y, $startingWidth: 100%) {
    @return ($y / $x) * $startingWidth;
}

@mixin fix-aspect-ratio($x, $y, $startingWidth: 100%) {
    // To get this working, position the child element
    // to 'absolute' in the top left corner
    width: $startingWidth;
    padding-bottom: aspect-ratio-height($x, $y, $startingWidth);
    position: relative;
    overflow: hidden;
}

@mixin faux-bullet-point($color: $c-neutral3, $right-space: 2px) {
    &:before {
        display: inline-block;
        content: '';
        @include border-radius(6px);
        height: rem(12px);
        width: rem(12px);
        margin-right: rem($right-space);
        background-color: $color;
    }
}

// Hide content visually, still readable by screen readers
@mixin u-h {
    border: 0 !important;
    clip: rect(0 0 0 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    width: 1px !important;
}

// Clamps a block of text to a certain number of lines,
// followed by an ellipsis in Webkit and Blink based browsers
// Reference: http://dropshado.ws/post/1015351370/webkit-line-clamp
@mixin text-clamp($lines: 2, $line-height: false) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $lines;

    // Fallback for non-Webkit browsers
    // (won't show `…` at the end of the block)
    @if $line-height {
        max-height: rem($line-height * $lines);
    }
}

// icon button (circular element containing an offset/centered icon)
@mixin icon-button($buttonSize, $iconOffsetX, $iconOffsetY: null) {
    width: $buttonSize;
    height: $buttonSize;
    @include border-radius($buttonSize);
    position: relative;
    display: inline-block;

    .i {
        position: absolute;
        text-indent: rem(-9999px);
        top: 50%;
        left: 50%;
        margin-top: $iconOffsetX;
        margin-left: if(not $iconOffsetY, $iconOffsetX, $iconOffsetY);
    }
}

// Micro clearfix (http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin clearfix {
    &:after,
    &:before {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
    @if $old-ie {
        zoom: 1;
    }
}

// a dynamic mixin so we can reuse these measurements
// for other properties – the media queries and widths
// need to match the ones in layout.scss
@mixin side-margins-calc($property) {
    @include mq(tablet) {
        $width: gs-span(12);
        #{$property}: -webkit-calc((100% - #{rem($width + $gs-gutter * 2)}) / 2);
        #{$property}: calc((100% - #{rem($width + $gs-gutter * 2)}) / 2);
    }
    @include mq(mem-full) {
        $width: gs-span(14);
        #{$property}: -webkit-calc((100% - #{rem($width + $gs-gutter * 2)}) / 2);
        #{$property}: calc((100% - #{rem($width + $gs-gutter * 2)}) / 2);
    }
}

@mixin columns($cols: 1, $gap: 0) {
    @if $browser-supports-columns {
        -webkit-column-count: $cols;
        -moz-column-count: $cols;
        column-count: $cols;

        -webkit-column-gap: rem($gap);
        -moz-column-gap: rem($gap);
        column-gap: rem($gap);
    } @else {
        margin-left: 0 - rem($gap / 2);
        margin-right: 0 - rem($gap / 2);
        & > * {
            @include box-sizing(border-box);
            width: (100% / $cols);
            float: left;
            padding-left: rem($gap / 2);
            padding-right: rem($gap / 2);
        }
    }
}

@mixin radio-circle($colour: $mem-brandLightblue) {
    @include border-radius (50%);
    content: ' ';
    background-color: $colour;
    width: rem($gs-baseline + 4);
    height: rem($gs-baseline + 4);
    display: block;
    position: absolute;
    left: rem($gs-baseline);
    top: rem($gs-gutter + 1);
}
